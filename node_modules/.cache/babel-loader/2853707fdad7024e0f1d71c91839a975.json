{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\React\\\\DEMICON\\\\user-app\\\\src\\\\Users.jsx\";\nimport React from 'react';\nimport createReactClass from 'create-react-class'; //import $ from 'jquery';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet jsonData = {};\nconst Helper = {\n  GetData: () => {\n    var returnValue = true;\n    const res = fetch('http://localhost:8888/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `\n                    {users{\n                        name\n                        users{\n                            name {\n                            title\n                            first\n                            last\n                            }\n                            gender\n                            email\n                        }\n                    }}\n                `,\n        variables: {\n          now: new Date().toISOString()\n        }\n      })\n    }).then(res => {\n      setTimeout(() => {\n        console.log(\"success\");\n      }, 4000);\n      jsonData = res.json().value;\n      returnValue = true;\n    }).then(result => {\n      //console.log(result.data);\n      jsonData = result;\n      returnValue = true; //this.setState({Data : result.data}) \n    }); // const myPromise = new Promise((resolve, reject) => {\n    //     setTimeout(() => {\n    //       resolve(res);\n    //     }, 4000);\n    //   });\n    // myPromise.then(value=>{return value});\n\n    return returnValue;\n  }\n}; // const Refresh2 = createReactClass({\n//   getInitialState: () => {\n//        return { showResults: false };\n//   },\n//   onClick: () => {\n//     var data = this.GetData();\n//     console.log(data);\n//     this.setState({ showResults: data!=null?true:false });\n//   },\n//   render: () => {\n//       return (\n//           <div>\n//             <button\n//               type=\"submit\" \n//               value=\"Refresh\"\n//               onClick={this.refreshData}\n//             >\n//               Refresh\n//             </button>\n//           </div>\n//       );\n//   }\n// });\n\nfunction Refresh() {\n  var showResult = false;\n\n  function refreshData(e) {\n    showResult = Helper.GetData();\n    console.log(jsonData);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      value: \"Refresh\",\n      onClick: refreshData,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), showResult ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"deneme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 22\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Refresh;\n\nfunction Users() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"users\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Refresh, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Users;\nexport default Users; //ReactDOM.render( <Users /> , document.getElementById('container'));\n//module.exports=Users;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Refresh\");\n$RefreshReg$(_c2, \"Users\");","map":{"version":3,"sources":["C:/repos/React/DEMICON/user-app/src/Users.jsx"],"names":["React","createReactClass","jsonData","Helper","GetData","returnValue","res","fetch","method","headers","body","JSON","stringify","query","variables","now","Date","toISOString","then","setTimeout","console","log","json","value","result","Refresh","showResult","refreshData","e","Users"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CACA;;;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,MAAM;AACb,QAAIC,WAAW,GAAC,IAAhB;AACA,UAAMC,GAAG,GAAGC,KAAK,CAAC,+BAAD,EACX;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAdiC;AAenBC,QAAAA,SAAS,EAAE;AACTC,UAAAA,GAAG,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AADI;AAfQ,OAAf;AALR,KADW,CAAL,CA0BLC,IA1BK,CA0BCZ,GAAD,IAAS;AACba,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,OAFS,EAEP,IAFO,CAAV;AAGAnB,MAAAA,QAAQ,GAAGI,GAAG,CAACgB,IAAJ,GAAWC,KAAtB;AACAlB,MAAAA,WAAW,GAAG,IAAd;AACD,KAhCK,EAiCLa,IAjCK,CAiCCM,MAAD,IAAY;AACd;AACAtB,MAAAA,QAAQ,GAAGsB,MAAX;AACAnB,MAAAA,WAAW,GAAG,IAAd,CAHc,CAId;AACH,KAtCK,CAAZ,CAFa,CA0CX;AACA;AACA;AACA;AACA;AAEA;;AAEA,WAAOA,WAAP;AACH;AApDY,CAAf,C,CAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAASoB,OAAT,GAAmB;AACjB,MAAIC,UAAU,GAAG,KAAjB;;AACA,WAASC,WAAT,CAAqBC,CAArB,EAAwB;AACtBF,IAAAA,UAAU,GAAGvB,MAAM,CAACC,OAAP,EAAb;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAZ;AACD;;AACD,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,OAAO,EAAEyB,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAQID,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAAuB,IARrC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KAlBQD,O;;AAqBT,SAASI,KAAT,GAAiB;AACf,sBACE;AAAA,2BACM;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACK,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;MAVQA,K;AAYT,eAAeA,KAAf,C,CAEA;AAEA","sourcesContent":["import React from 'react'\r\n\r\nimport createReactClass from 'create-react-class';\r\n//import $ from 'jquery';\r\n\r\nlet jsonData = {};\r\n\r\nconst Helper = {\r\n  GetData: () => {\r\n    var returnValue=true;\r\n    const res = fetch('http://localhost:8888/graphql', \r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              query: `\r\n                    {users{\r\n                        name\r\n                        users{\r\n                            name {\r\n                            title\r\n                            first\r\n                            last\r\n                            }\r\n                            gender\r\n                            email\r\n                        }\r\n                    }}\r\n                `,\r\n              variables: {\r\n                now: new Date().toISOString(),\r\n              },\r\n            }),\r\n          })\r\n          .then((res) => {\r\n            setTimeout(() => {\r\n              console.log(\"success\");\r\n            }, 4000);\r\n            jsonData = res.json().value;\r\n            returnValue = true;\r\n          })\r\n          .then((result) => {\r\n              //console.log(result.data);\r\n              jsonData = result;\r\n              returnValue = true;\r\n              //this.setState({Data : result.data}) \r\n          });\r\n\r\n      // const myPromise = new Promise((resolve, reject) => {\r\n      //     setTimeout(() => {\r\n      //       resolve(res);\r\n      //     }, 4000);\r\n      //   });\r\n      \r\n      // myPromise.then(value=>{return value});\r\n      \r\n      return returnValue;\r\n  }\r\n}\r\n\r\n// const Refresh2 = createReactClass({\r\n//   getInitialState: () => {\r\n//        return { showResults: false };\r\n//   },\r\n//   onClick: () => {\r\n//     var data = this.GetData();\r\n//     console.log(data);\r\n//     this.setState({ showResults: data!=null?true:false });\r\n//   },\r\n//   render: () => {\r\n//       return (\r\n//           <div>\r\n//             <button\r\n//               type=\"submit\" \r\n//               value=\"Refresh\"\r\n//               onClick={this.refreshData}\r\n//             >\r\n//               Refresh\r\n//             </button>\r\n              \r\n//           </div>\r\n//       );\r\n//   }\r\n// });\r\n\r\nfunction Refresh() {\r\n  var showResult = false;\r\n  function refreshData(e) {\r\n    showResult = Helper.GetData();\r\n    console.log(jsonData);\r\n  }\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"submit\" \r\n        value=\"Refresh\"\r\n        onClick={refreshData}\r\n      >\r\n        Refresh\r\n      </button>\r\n      { showResult ? <div>deneme</div> : null }\r\n    </div>\r\n);\r\n}\r\n\r\n\r\nfunction Users() {\r\n  return (\r\n    <div>\r\n          <header id=\"users\">\r\n              <div className=\"container\">\r\n                   <Refresh/>\r\n              </div>\r\n          </header>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n\r\n//ReactDOM.render( <Users /> , document.getElementById('container'));\r\n\r\n//module.exports=Users;"]},"metadata":{},"sourceType":"module"}